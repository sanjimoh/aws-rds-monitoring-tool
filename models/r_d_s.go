// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RDS An RDS instance
//
// swagger:model RDS
type RDS struct {

	// Specifies the name of the Availability Zone the DB instance is located in.
	// Required: true
	AvailabilityZone *string `json:"availabilityZone"`

	// If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.
	// Required: true
	ClusterIdentifier *string `json:"clusterIdentifier"`

	// Contains a user-supplied database identifier. This identifier is the unique key that identifies a DB instance.
	// Required: true
	InstanceIdentifier *string `json:"instanceIdentifier"`

	// The AWS Region-unique, immutable identifier for the DB instance.
	// Required: true
	ResourceID *string `json:"resourceId"`

	// The status of a DB instance indicates the health of the DB instance. More refer here - https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Status.html
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this r d s
func (m *RDS) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RDS) validateAvailabilityZone(formats strfmt.Registry) error {

	if err := validate.Required("availabilityZone", "body", m.AvailabilityZone); err != nil {
		return err
	}

	return nil
}

func (m *RDS) validateClusterIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("clusterIdentifier", "body", m.ClusterIdentifier); err != nil {
		return err
	}

	return nil
}

func (m *RDS) validateInstanceIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("instanceIdentifier", "body", m.InstanceIdentifier); err != nil {
		return err
	}

	return nil
}

func (m *RDS) validateResourceID(formats strfmt.Registry) error {

	if err := validate.Required("resourceId", "body", m.ResourceID); err != nil {
		return err
	}

	return nil
}

func (m *RDS) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RDS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RDS) UnmarshalBinary(b []byte) error {
	var res RDS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
