// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RdsQueriesExecAttr Attributes required for RDS queries executions.
//
// swagger:model RdsQueriesExecAttr
type RdsQueriesExecAttr struct {

	// DB endpoint
	// Required: true
	DbEndpoint *string `json:"dbEndpoint"`

	// DB Name
	// Required: true
	DbName *string `json:"dbName"`

	// DB User
	// Required: true
	DbUser *string `json:"dbUser"`

	// IAM arn
	// Required: true
	IamArn *string `json:"iamArn"`

	// Array of query
	// Required: true
	Queries []*RDSQuery `json:"queries"`

	// AWS region
	// Required: true
	Region *string `json:"region"`
}

// Validate validates this rds queries exec attr
func (m *RdsQueriesExecAttr) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDbEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIamArn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RdsQueriesExecAttr) validateDbEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("dbEndpoint", "body", m.DbEndpoint); err != nil {
		return err
	}

	return nil
}

func (m *RdsQueriesExecAttr) validateDbName(formats strfmt.Registry) error {

	if err := validate.Required("dbName", "body", m.DbName); err != nil {
		return err
	}

	return nil
}

func (m *RdsQueriesExecAttr) validateDbUser(formats strfmt.Registry) error {

	if err := validate.Required("dbUser", "body", m.DbUser); err != nil {
		return err
	}

	return nil
}

func (m *RdsQueriesExecAttr) validateIamArn(formats strfmt.Registry) error {

	if err := validate.Required("iamArn", "body", m.IamArn); err != nil {
		return err
	}

	return nil
}

func (m *RdsQueriesExecAttr) validateQueries(formats strfmt.Registry) error {

	if err := validate.Required("queries", "body", m.Queries); err != nil {
		return err
	}

	for i := 0; i < len(m.Queries); i++ {
		if swag.IsZero(m.Queries[i]) { // not required
			continue
		}

		if m.Queries[i] != nil {
			if err := m.Queries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("queries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RdsQueriesExecAttr) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RdsQueriesExecAttr) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RdsQueriesExecAttr) UnmarshalBinary(b []byte) error {
	var res RdsQueriesExecAttr
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
