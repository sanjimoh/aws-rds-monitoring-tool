// Code generated by go-swagger; DO NOT EDIT.

package aws_rds_monitoring_tool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostV1RdsQueriesHandlerFunc turns a function with the right signature into a post v1 rds queries handler
type PostV1RdsQueriesHandlerFunc func(PostV1RdsQueriesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostV1RdsQueriesHandlerFunc) Handle(params PostV1RdsQueriesParams) middleware.Responder {
	return fn(params)
}

// PostV1RdsQueriesHandler interface for that can handle valid post v1 rds queries params
type PostV1RdsQueriesHandler interface {
	Handle(PostV1RdsQueriesParams) middleware.Responder
}

// NewPostV1RdsQueries creates a new http.Handler for the post v1 rds queries operation
func NewPostV1RdsQueries(ctx *middleware.Context, handler PostV1RdsQueriesHandler) *PostV1RdsQueries {
	return &PostV1RdsQueries{Context: ctx, Handler: handler}
}

/*PostV1RdsQueries swagger:route POST /v1/rds/queries aws-rds-monitoring-tool postV1RdsQueries

Execute a set of queries on a RDS instance

For example:
```
POST /api/armt/v1/rds/queries
```
Sample request body will be:
```
{
  "queries": [
    {
      "query": "string"
    }
  ],
  "dbName": "string",
  "dbEndpoint": "string"
}
```


*/
type PostV1RdsQueries struct {
	Context *middleware.Context
	Handler PostV1RdsQueriesHandler
}

func (o *PostV1RdsQueries) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostV1RdsQueriesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
