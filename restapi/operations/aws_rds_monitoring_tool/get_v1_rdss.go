// Code generated by go-swagger; DO NOT EDIT.

package aws_rds_monitoring_tool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetV1RdssHandlerFunc turns a function with the right signature into a get v1 rdss handler
type GetV1RdssHandlerFunc func(GetV1RdssParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV1RdssHandlerFunc) Handle(params GetV1RdssParams) middleware.Responder {
	return fn(params)
}

// GetV1RdssHandler interface for that can handle valid get v1 rdss params
type GetV1RdssHandler interface {
	Handle(GetV1RdssParams) middleware.Responder
}

// NewGetV1Rdss creates a new http.Handler for the get v1 rdss operation
func NewGetV1Rdss(ctx *middleware.Context, handler GetV1RdssHandler) *GetV1Rdss {
	return &GetV1Rdss{Context: ctx, Handler: handler}
}

/*GetV1Rdss swagger:route GET /v1/rdss aws-rds-monitoring-tool getV1Rdss

Gets all rds statistics running in the AWS cluster

For example:
```
GET /api/armt/v1/rdss?region=us-east-1b
```

Returns list of rds instances:
```
[
  {
            "availabilityZone": "ap-south-1b",
            "clusterIdentifier": null,
            "dbInstanceClass": "db.t2.micro",
            "dbName": sanjitdb,
            "engine": "mysql",
            "engineVersion": "8.0.16",
            "instanceIdentifier": "sanjit-database-1",
            "resourceId": "db-PX346I7MRIQVANIZ5XE6UB5YQY",
            "status": "available"
        },
        {
          "availabilityZone": "ap-east-1b",
          "clusterIdentifier": null,
          "dbInstanceClass": "db.t3.micro",
          "dbName": "sanjitdb2",
          "engine": "mysql",
          "engineVersion": "8.0.19",
          "instanceIdentifier": "sanjit-database-2",
          "resourceId": "db-Z5SH5B7G6MF3STWPY75S6RWGY4",
          "status": "creating"
        },
        ...
]
```


*/
type GetV1Rdss struct {
	Context *middleware.Context
	Handler GetV1RdssHandler
}

func (o *GetV1Rdss) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetV1RdssParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
