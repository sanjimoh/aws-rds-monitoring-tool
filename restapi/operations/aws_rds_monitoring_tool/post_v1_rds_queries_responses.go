// Code generated by go-swagger; DO NOT EDIT.

package aws_rds_monitoring_tool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"aws-rds-monitoring-tool/models"
)

// PostV1RdsQueriesOKCode is the HTTP code returned for type PostV1RdsQueriesOK
const PostV1RdsQueriesOKCode int = 200

/*PostV1RdsQueriesOK RDS queries execution successfull.

swagger:response postV1RdsQueriesOK
*/
type PostV1RdsQueriesOK struct {

	/*
	  In: Body
	*/
	Payload *models.RdsQueriesExecAttr `json:"body,omitempty"`
}

// NewPostV1RdsQueriesOK creates PostV1RdsQueriesOK with default headers values
func NewPostV1RdsQueriesOK() *PostV1RdsQueriesOK {

	return &PostV1RdsQueriesOK{}
}

// WithPayload adds the payload to the post v1 rds queries o k response
func (o *PostV1RdsQueriesOK) WithPayload(payload *models.RdsQueriesExecAttr) *PostV1RdsQueriesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post v1 rds queries o k response
func (o *PostV1RdsQueriesOK) SetPayload(payload *models.RdsQueriesExecAttr) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostV1RdsQueriesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostV1RdsQueriesBadRequestCode is the HTTP code returned for type PostV1RdsQueriesBadRequest
const PostV1RdsQueriesBadRequestCode int = 400

/*PostV1RdsQueriesBadRequest Bad Request, Unable to execute RDS queries.

swagger:response postV1RdsQueriesBadRequest
*/
type PostV1RdsQueriesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostV1RdsQueriesBadRequest creates PostV1RdsQueriesBadRequest with default headers values
func NewPostV1RdsQueriesBadRequest() *PostV1RdsQueriesBadRequest {

	return &PostV1RdsQueriesBadRequest{}
}

// WithPayload adds the payload to the post v1 rds queries bad request response
func (o *PostV1RdsQueriesBadRequest) WithPayload(payload *models.Error) *PostV1RdsQueriesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post v1 rds queries bad request response
func (o *PostV1RdsQueriesBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostV1RdsQueriesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostV1RdsQueriesInternalServerErrorCode is the HTTP code returned for type PostV1RdsQueriesInternalServerError
const PostV1RdsQueriesInternalServerErrorCode int = 500

/*PostV1RdsQueriesInternalServerError Internal server error.

swagger:response postV1RdsQueriesInternalServerError
*/
type PostV1RdsQueriesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostV1RdsQueriesInternalServerError creates PostV1RdsQueriesInternalServerError with default headers values
func NewPostV1RdsQueriesInternalServerError() *PostV1RdsQueriesInternalServerError {

	return &PostV1RdsQueriesInternalServerError{}
}

// WithPayload adds the payload to the post v1 rds queries internal server error response
func (o *PostV1RdsQueriesInternalServerError) WithPayload(payload *models.Error) *PostV1RdsQueriesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post v1 rds queries internal server error response
func (o *PostV1RdsQueriesInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostV1RdsQueriesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
